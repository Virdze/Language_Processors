
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BEGIN DEF DO ELSE END EQ GEQ ID IF INT LEQ MAIN NEQ NUM OR READ STR WHILE WRITEprog : declrs funcs mainprog : declrs mainprog : mainmain : MAIN '{' instrs '}'declrs : declrs declrdeclrs : declrdeclr : INT decllistdecllist : singdeclfuncs : funcs funcsingdecl : ID ';'singdecl : ID '=' expr ';'singdecl : ID '[' NUM ']' ';'list : list ',' exprlist : exprexpr : lexprlexpr : lexpr EQ arithmlexpr : lexpr '>' arithmlexpr : lexpr '<' arithmlexpr : lexpr GEQ arithmlexpr : lexpr LEQ arithmlexpr : arithmarithm : arithm '+' termarithm : arithm '-' termarithm : termterm : term '*' parterm : term '/' parterm : term '%' parterm : parpar : '(' expr ')'par : factorfactor : NUMfactor : IDfactor : ID '[' expr ']'funcs : funcfunc : DEF ID '(' ')' '{' instrs '}'instrs : instrs instrinstrs : instrinstr : atrinstr : writeinstr : readinstr : condinstr : loopinstr : fcallinstr : atr : ID '=' expr ';'atr : ID '=' readatr : ID '[' expr ']' '=' readwrite : WRITE '(' STR ')' ';' write : WRITE '(' ID ')' ';'read : READ '(' ID ')' ';'cond : ifelseexpr instrscondifelse elsecondifelseexpr : IF '(' expr ')'instrscondifelse : '{' instrs '}'elsecond : ELSE '{' instrs '}'cond : ifexpr instrscondififexpr : IF '(' expr ')'instrscondif : '{' instrs '}'loop : whiledo whilexprs doinstrswhiledo : WHILEwhilexprs : '(' expr ')'doinstrs : DO '{' instrs '}' fcall : ID '(' ')' ';'"
    
_lr_action_items = {'MAIN':([0,2,4,7,9,10,13,14,17,35,80,118,127,],[5,5,-6,5,-5,-34,-7,-8,-9,-10,-11,-12,-35,]),'INT':([0,2,4,9,13,14,35,80,118,],[6,6,-6,-5,-7,-8,-10,-11,-12,]),'$end':([1,3,8,16,39,],[0,-3,-2,-1,-4,]),'DEF':([2,4,7,9,10,13,14,17,35,80,118,127,],[11,-6,11,-5,-34,-7,-8,-9,-10,-11,-12,-35,]),'{':([5,30,31,63,72,76,105,],[12,47,49,93,100,103,-52,]),'ID':([6,11,12,19,20,21,22,23,24,25,26,36,40,41,42,44,45,47,48,49,51,52,59,65,71,73,74,75,79,81,82,83,84,85,86,87,88,89,90,93,94,96,100,102,103,119,121,122,123,124,125,128,129,130,],[15,18,27,27,-37,-38,-39,-40,-41,-42,-43,53,-36,53,53,69,70,27,-55,27,53,53,53,-46,-51,27,27,-58,53,53,53,53,53,53,53,53,53,53,53,27,-45,-62,27,-57,27,27,-48,-49,-50,27,27,-47,-54,-61,]),'}':([12,19,20,21,22,23,24,25,26,40,47,48,49,65,71,73,74,75,93,94,96,100,102,103,119,121,122,123,124,125,128,129,130,],[-44,39,-37,-38,-39,-40,-41,-42,-43,-36,-44,-55,-44,-46,-51,101,102,-58,-44,-45,-62,-44,-57,-44,127,-48,-49,-50,129,130,-47,-54,-61,]),'WRITE':([12,19,20,21,22,23,24,25,26,40,47,48,49,65,71,73,74,75,93,94,96,100,102,103,119,121,122,123,124,125,128,129,130,],[28,28,-37,-38,-39,-40,-41,-42,-43,-36,28,-55,28,-46,-51,28,28,-58,28,-45,-62,28,-57,28,28,-48,-49,-50,28,28,-47,-54,-61,]),'READ':([12,19,20,21,22,23,24,25,26,40,41,47,48,49,65,71,73,74,75,93,94,96,100,102,103,119,120,121,122,123,124,125,128,129,130,],[29,29,-37,-38,-39,-40,-41,-42,-43,-36,29,29,-55,29,-46,-51,29,29,-58,29,-45,-62,29,-57,29,29,29,-48,-49,-50,29,29,-47,-54,-61,]),'IF':([12,19,20,21,22,23,24,25,26,40,47,48,49,65,71,73,74,75,93,94,96,100,102,103,119,121,122,123,124,125,128,129,130,],[33,33,-37,-38,-39,-40,-41,-42,-43,-36,33,-55,33,-46,-51,33,33,-58,33,-45,-62,33,-57,33,33,-48,-49,-50,33,33,-47,-54,-61,]),'WHILE':([12,19,20,21,22,23,24,25,26,40,47,48,49,65,71,73,74,75,93,94,96,100,102,103,119,121,122,123,124,125,128,129,130,],[34,34,-37,-38,-39,-40,-41,-42,-43,-36,34,-55,34,-46,-51,34,34,-58,34,-45,-62,34,-57,34,34,-48,-49,-50,34,34,-47,-54,-61,]),';':([15,53,54,55,56,57,58,60,61,64,67,92,97,98,99,107,108,109,110,111,112,113,114,115,116,117,126,],[35,-32,80,-15,-21,-24,-28,-30,-31,94,96,118,121,122,123,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'=':([15,27,95,],[36,41,120,]),'[':([15,27,53,],[37,42,79,]),'(':([18,27,28,29,32,33,34,36,41,42,51,52,59,79,81,82,83,84,85,86,87,88,89,90,],[38,43,44,45,51,52,-59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'NUM':([36,37,41,42,51,52,59,79,81,82,83,84,85,86,87,88,89,90,],[61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),')':([38,43,53,55,56,57,58,60,61,68,69,70,77,78,91,107,108,109,110,111,112,113,114,115,116,117,126,],[63,67,-32,-15,-21,-24,-28,-30,-31,97,98,99,104,105,117,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'STR':([44,],[68,]),'ELSE':([46,101,],[72,-53,]),'DO':([50,104,],[76,-60,]),'*':([53,57,58,60,61,112,113,114,115,116,117,126,],[-32,88,-28,-30,-31,88,88,-25,-26,-27,-29,-33,]),'/':([53,57,58,60,61,112,113,114,115,116,117,126,],[-32,89,-28,-30,-31,89,89,-25,-26,-27,-29,-33,]),'%':([53,57,58,60,61,112,113,114,115,116,117,126,],[-32,90,-28,-30,-31,90,90,-25,-26,-27,-29,-33,]),'+':([53,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,86,-24,-28,-30,-31,86,86,86,86,86,-22,-23,-25,-26,-27,-29,-33,]),'-':([53,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,87,-24,-28,-30,-31,87,87,87,87,87,-22,-23,-25,-26,-27,-29,-33,]),'EQ':([53,55,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,81,-21,-24,-28,-30,-31,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'>':([53,55,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,82,-21,-24,-28,-30,-31,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'<':([53,55,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,83,-21,-24,-28,-30,-31,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'GEQ':([53,55,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,84,-21,-24,-28,-30,-31,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),'LEQ':([53,55,56,57,58,60,61,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,85,-21,-24,-28,-30,-31,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),']':([53,55,56,57,58,60,61,62,66,106,107,108,109,110,111,112,113,114,115,116,117,126,],[-32,-15,-21,-24,-28,-30,-31,92,95,126,-16,-17,-18,-19,-20,-22,-23,-25,-26,-27,-29,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'declrs':([0,],[2,]),'main':([0,2,7,],[3,8,16,]),'declr':([0,2,],[4,9,]),'funcs':([2,],[7,]),'func':([2,7,],[10,17,]),'decllist':([6,],[13,]),'singdecl':([6,],[14,]),'instrs':([12,47,49,93,100,103,],[19,73,74,119,124,125,]),'instr':([12,19,47,49,73,74,93,100,103,119,124,125,],[20,40,20,20,40,40,20,20,20,40,40,40,]),'atr':([12,19,47,49,73,74,93,100,103,119,124,125,],[21,21,21,21,21,21,21,21,21,21,21,21,]),'write':([12,19,47,49,73,74,93,100,103,119,124,125,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'read':([12,19,41,47,49,73,74,93,100,103,119,120,124,125,],[23,23,65,23,23,23,23,23,23,23,23,128,23,23,]),'cond':([12,19,47,49,73,74,93,100,103,119,124,125,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'loop':([12,19,47,49,73,74,93,100,103,119,124,125,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'fcall':([12,19,47,49,73,74,93,100,103,119,124,125,],[26,26,26,26,26,26,26,26,26,26,26,26,]),'ifelseexpr':([12,19,47,49,73,74,93,100,103,119,124,125,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'ifexpr':([12,19,47,49,73,74,93,100,103,119,124,125,],[31,31,31,31,31,31,31,31,31,31,31,31,]),'whiledo':([12,19,47,49,73,74,93,100,103,119,124,125,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'instrscondifelse':([30,],[46,]),'instrscondif':([31,],[48,]),'whilexprs':([32,],[50,]),'expr':([36,41,42,51,52,59,79,],[54,64,66,77,78,91,106,]),'lexpr':([36,41,42,51,52,59,79,],[55,55,55,55,55,55,55,]),'arithm':([36,41,42,51,52,59,79,81,82,83,84,85,],[56,56,56,56,56,56,56,107,108,109,110,111,]),'term':([36,41,42,51,52,59,79,81,82,83,84,85,86,87,],[57,57,57,57,57,57,57,57,57,57,57,57,112,113,]),'par':([36,41,42,51,52,59,79,81,82,83,84,85,86,87,88,89,90,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,114,115,116,]),'factor':([36,41,42,51,52,59,79,81,82,83,84,85,86,87,88,89,90,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'elsecond':([46,],[71,]),'doinstrs':([50,],[75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> declrs funcs main','prog',3,'p_prog_declrs_funcs','parser.py',17),
  ('prog -> declrs main','prog',2,'p_prog_declrs_main','parser.py',20),
  ('prog -> main','prog',1,'p_prog_main','parser.py',23),
  ('main -> MAIN { instrs }','main',4,'p_main','parser.py',26),
  ('declrs -> declrs declr','declrs',2,'p_declrs_declrs','parser.py',30),
  ('declrs -> declr','declrs',1,'p_declrs_declr','parser.py',33),
  ('declr -> INT decllist','declr',2,'p_declr','parser.py',37),
  ('decllist -> singdecl','decllist',1,'p_decllist_single','parser.py',44),
  ('funcs -> funcs func','funcs',2,'p_funcs_funcs','parser.py',48),
  ('singdecl -> ID ;','singdecl',2,'p_singdecl_id','parser.py',51),
  ('singdecl -> ID = expr ;','singdecl',4,'p_singdecl_expr','parser.py',58),
  ('singdecl -> ID [ NUM ] ;','singdecl',5,'p_singdecl_arr','parser.py',68),
  ('list -> list , expr','list',3,'p_list_exprl','parser.py',81),
  ('list -> expr','list',1,'p_list_expr','parser.py',84),
  ('expr -> lexpr','expr',1,'p_expr_lexpr','parser.py',104),
  ('lexpr -> lexpr EQ arithm','lexpr',3,'p_lexpr_eq','parser.py',109),
  ('lexpr -> lexpr > arithm','lexpr',3,'p_lexpr_g','parser.py',118),
  ('lexpr -> lexpr < arithm','lexpr',3,'p_lexpr_l','parser.py',123),
  ('lexpr -> lexpr GEQ arithm','lexpr',3,'p_lexpr_geq','parser.py',129),
  ('lexpr -> lexpr LEQ arithm','lexpr',3,'p_lexpr_leq','parser.py',134),
  ('lexpr -> arithm','lexpr',1,'p_lexpr_arithm','parser.py',140),
  ('arithm -> arithm + term','arithm',3,'p_arithm_plus','parser.py',145),
  ('arithm -> arithm - term','arithm',3,'p_arithm_minus','parser.py',149),
  ('arithm -> term','arithm',1,'p_arithm_term','parser.py',153),
  ('term -> term * par','term',3,'p_term_mul','parser.py',157),
  ('term -> term / par','term',3,'p_term_div','parser.py',161),
  ('term -> term % par','term',3,'p_term_mod','parser.py',166),
  ('term -> par','term',1,'p_term_par','parser.py',171),
  ('par -> ( expr )','par',3,'p_par_expr','parser.py',176),
  ('par -> factor','par',1,'p_par_factor','parser.py',181),
  ('factor -> NUM','factor',1,'p_factor_num','parser.py',186),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',190),
  ('factor -> ID [ expr ]','factor',4,'p_factor_arr','parser.py',194),
  ('funcs -> func','funcs',1,'p_funcs_func','parser.py',198),
  ('func -> DEF ID ( ) { instrs }','func',7,'p_func','parser.py',203),
  ('instrs -> instrs instr','instrs',2,'p_instrs_instrs','parser.py',208),
  ('instrs -> instr','instrs',1,'p_instrs_instr','parser.py',211),
  ('instr -> atr','instr',1,'p_instr_atr','parser.py',215),
  ('instr -> write','instr',1,'p_instr_write','parser.py',220),
  ('instr -> read','instr',1,'p_instr_read','parser.py',225),
  ('instr -> cond','instr',1,'p_instr_cond','parser.py',230),
  ('instr -> loop','instr',1,'p_instr_loop','parser.py',234),
  ('instr -> fcall','instr',1,'p_instr_fcall','parser.py',239),
  ('instr -> <empty>','instr',0,'p_instr_vazio','parser.py',243),
  ('atr -> ID = expr ;','atr',4,'p_atr_expr','parser.py',248),
  ('atr -> ID = read','atr',3,'p_atr_read','parser.py',254),
  ('atr -> ID [ expr ] = read','atr',6,'p_atr_arr_read','parser.py',266),
  ('write -> WRITE ( STR ) ;','write',5,'p_write_str','parser.py',272),
  ('write -> WRITE ( ID ) ;','write',5,'p_write_id','parser.py',279),
  ('read -> READ ( ID ) ;','read',5,'p_read','parser.py',286),
  ('cond -> ifelseexpr instrscondifelse elsecond','cond',3,'p_cond_ifelse','parser.py',294),
  ('ifelseexpr -> IF ( expr )','ifelseexpr',4,'p_ifelseexpr','parser.py',297),
  ('instrscondifelse -> { instrs }','instrscondifelse',3,'p_instrscondifelse','parser.py',301),
  ('elsecond -> ELSE { instrs }','elsecond',4,'p_elsecond','parser.py',306),
  ('cond -> ifexpr instrscondif','cond',2,'p_cond_if','parser.py',311),
  ('ifexpr -> IF ( expr )','ifexpr',4,'p_ifexpr','parser.py',314),
  ('instrscondif -> { instrs }','instrscondif',3,'p_instrscondif','parser.py',318),
  ('loop -> whiledo whilexprs doinstrs','loop',3,'p_loop_while_do','parser.py',323),
  ('whiledo -> WHILE','whiledo',1,'p_while','parser.py',326),
  ('whilexprs -> ( expr )','whilexprs',3,'p_whileexprs','parser.py',330),
  ('doinstrs -> DO { instrs }','doinstrs',4,'p_doinstrs','parser.py',334),
  ('fcall -> ID ( ) ;','fcall',4,'p_fcall','parser.py',340),
]
