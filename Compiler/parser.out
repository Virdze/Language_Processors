Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    END
    NEQ
    OR

Grammar

Rule 0     S' -> prog
Rule 1     prog -> declrs funcs main
Rule 2     prog -> declrs main
Rule 3     prog -> main
Rule 4     main -> MAIN { instrs }
Rule 5     declrs -> declrs declr
Rule 6     declrs -> declr
Rule 7     declr -> INT decllist
Rule 8     decllist -> singdecl
Rule 9     funcs -> funcs func
Rule 10    singdecl -> ID ;
Rule 11    singdecl -> ID = expr ;
Rule 12    singdecl -> ID [ NUM ] ;
Rule 13    list -> list , expr
Rule 14    list -> expr
Rule 15    expr -> lexpr
Rule 16    lexpr -> lexpr EQ arithm
Rule 17    lexpr -> lexpr > arithm
Rule 18    lexpr -> lexpr < arithm
Rule 19    lexpr -> lexpr GEQ arithm
Rule 20    lexpr -> lexpr LEQ arithm
Rule 21    lexpr -> arithm
Rule 22    arithm -> arithm + term
Rule 23    arithm -> arithm - term
Rule 24    arithm -> term
Rule 25    term -> term * par
Rule 26    term -> term / par
Rule 27    term -> term % par
Rule 28    term -> par
Rule 29    par -> ( expr )
Rule 30    par -> factor
Rule 31    factor -> NUM
Rule 32    factor -> ID
Rule 33    factor -> ID [ expr ]
Rule 34    funcs -> func
Rule 35    func -> DEF ID ( ) { instrs }
Rule 36    instrs -> instrs instr
Rule 37    instrs -> instr
Rule 38    instr -> atr
Rule 39    instr -> write
Rule 40    instr -> read
Rule 41    instr -> cond
Rule 42    instr -> loop
Rule 43    instr -> fcall
Rule 44    instr -> <empty>
Rule 45    atr -> ID = expr ;
Rule 46    atr -> ID = read
Rule 47    atr -> ID [ expr ] = read
Rule 48    write -> WRITE ( STR ) ;
Rule 49    write -> WRITE ( ID ) ;
Rule 50    read -> READ ( ID ) ;
Rule 51    cond -> ifelseexpr instrscondifelse elsecond
Rule 52    ifelseexpr -> IF ( expr )
Rule 53    instrscondifelse -> { instrs }
Rule 54    elsecond -> ELSE { instrs }
Rule 55    cond -> ifexpr instrscondif
Rule 56    ifexpr -> IF ( expr )
Rule 57    instrscondif -> { instrs }
Rule 58    loop -> whiledo whilexprs doinstrs
Rule 59    whiledo -> WHILE
Rule 60    whilexprs -> ( expr )
Rule 61    doinstrs -> DO { instrs }
Rule 62    fcall -> ID ( ) ;

Terminals, with rules where they appear

%                    : 27
(                    : 29 35 48 49 50 52 56 60 62
)                    : 29 35 48 49 50 52 56 60 62
*                    : 25
+                    : 22
,                    : 13
-                    : 23
/                    : 26
;                    : 10 11 12 45 48 49 50 62
<                    : 18
=                    : 11 45 46 47
>                    : 17
AND                  : 
BEGIN                : 
DEF                  : 35
DO                   : 61
ELSE                 : 54
END                  : 
EQ                   : 16
GEQ                  : 19
ID                   : 10 11 12 32 33 35 45 46 47 49 50 62
IF                   : 52 56
INT                  : 7
LEQ                  : 20
MAIN                 : 4
NEQ                  : 
NUM                  : 12 31
OR                   : 
READ                 : 50
STR                  : 48
WHILE                : 59
WRITE                : 48 49
[                    : 12 33 47
]                    : 12 33 47
error                : 
{                    : 4 35 53 54 57 61
}                    : 4 35 53 54 57 61

Nonterminals, with rules where they appear

arithm               : 16 17 18 19 20 21 22 23
atr                  : 38
cond                 : 41
decllist             : 7
declr                : 5 6
declrs               : 1 2 5
doinstrs             : 58
elsecond             : 51
expr                 : 11 13 14 29 33 45 47 52 56 60
factor               : 30
fcall                : 43
func                 : 9 34
funcs                : 1 9
ifelseexpr           : 51
ifexpr               : 55
instr                : 36 37
instrs               : 4 35 36 53 54 57 61
instrscondif         : 55
instrscondifelse     : 51
lexpr                : 15 16 17 18 19 20
list                 : 13
loop                 : 42
main                 : 1 2 3
par                  : 25 26 27 28
prog                 : 0
read                 : 40 46 47
singdecl             : 8
term                 : 22 23 24 25 26 27
whiledo              : 58
whilexprs            : 58
write                : 39

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . declrs funcs main
    (2) prog -> . declrs main
    (3) prog -> . main
    (5) declrs -> . declrs declr
    (6) declrs -> . declr
    (4) main -> . MAIN { instrs }
    (7) declr -> . INT decllist

    MAIN            shift and go to state 5
    INT             shift and go to state 6

    prog                           shift and go to state 1
    declrs                         shift and go to state 2
    main                           shift and go to state 3
    declr                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> declrs . funcs main
    (2) prog -> declrs . main
    (5) declrs -> declrs . declr
    (9) funcs -> . funcs func
    (34) funcs -> . func
    (4) main -> . MAIN { instrs }
    (7) declr -> . INT decllist
    (35) func -> . DEF ID ( ) { instrs }

    MAIN            shift and go to state 5
    INT             shift and go to state 6
    DEF             shift and go to state 11

    funcs                          shift and go to state 7
    main                           shift and go to state 8
    declr                          shift and go to state 9
    func                           shift and go to state 10

state 3

    (3) prog -> main .

    $end            reduce using rule 3 (prog -> main .)


state 4

    (6) declrs -> declr .

    MAIN            reduce using rule 6 (declrs -> declr .)
    INT             reduce using rule 6 (declrs -> declr .)
    DEF             reduce using rule 6 (declrs -> declr .)


state 5

    (4) main -> MAIN . { instrs }

    {               shift and go to state 12


state 6

    (7) declr -> INT . decllist
    (8) decllist -> . singdecl
    (10) singdecl -> . ID ;
    (11) singdecl -> . ID = expr ;
    (12) singdecl -> . ID [ NUM ] ;

    ID              shift and go to state 15

    decllist                       shift and go to state 13
    singdecl                       shift and go to state 14

state 7

    (1) prog -> declrs funcs . main
    (9) funcs -> funcs . func
    (4) main -> . MAIN { instrs }
    (35) func -> . DEF ID ( ) { instrs }

    MAIN            shift and go to state 5
    DEF             shift and go to state 11

    main                           shift and go to state 16
    func                           shift and go to state 17

state 8

    (2) prog -> declrs main .

    $end            reduce using rule 2 (prog -> declrs main .)


state 9

    (5) declrs -> declrs declr .

    MAIN            reduce using rule 5 (declrs -> declrs declr .)
    INT             reduce using rule 5 (declrs -> declrs declr .)
    DEF             reduce using rule 5 (declrs -> declrs declr .)


state 10

    (34) funcs -> func .

    MAIN            reduce using rule 34 (funcs -> func .)
    DEF             reduce using rule 34 (funcs -> func .)


state 11

    (35) func -> DEF . ID ( ) { instrs }

    ID              shift and go to state 18


state 12

    (4) main -> MAIN { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 19
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 13

    (7) declr -> INT decllist .

    MAIN            reduce using rule 7 (declr -> INT decllist .)
    INT             reduce using rule 7 (declr -> INT decllist .)
    DEF             reduce using rule 7 (declr -> INT decllist .)


state 14

    (8) decllist -> singdecl .

    MAIN            reduce using rule 8 (decllist -> singdecl .)
    INT             reduce using rule 8 (decllist -> singdecl .)
    DEF             reduce using rule 8 (decllist -> singdecl .)


state 15

    (10) singdecl -> ID . ;
    (11) singdecl -> ID . = expr ;
    (12) singdecl -> ID . [ NUM ] ;

    ;               shift and go to state 35
    =               shift and go to state 36
    [               shift and go to state 37


state 16

    (1) prog -> declrs funcs main .

    $end            reduce using rule 1 (prog -> declrs funcs main .)


state 17

    (9) funcs -> funcs func .

    MAIN            reduce using rule 9 (funcs -> funcs func .)
    DEF             reduce using rule 9 (funcs -> funcs func .)


state 18

    (35) func -> DEF ID . ( ) { instrs }

    (               shift and go to state 38


state 19

    (4) main -> MAIN { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 39
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 20

    (37) instrs -> instr .

    }               reduce using rule 37 (instrs -> instr .)
    ID              reduce using rule 37 (instrs -> instr .)
    WRITE           reduce using rule 37 (instrs -> instr .)
    READ            reduce using rule 37 (instrs -> instr .)
    IF              reduce using rule 37 (instrs -> instr .)
    WHILE           reduce using rule 37 (instrs -> instr .)


state 21

    (38) instr -> atr .

    }               reduce using rule 38 (instr -> atr .)
    ID              reduce using rule 38 (instr -> atr .)
    WRITE           reduce using rule 38 (instr -> atr .)
    READ            reduce using rule 38 (instr -> atr .)
    IF              reduce using rule 38 (instr -> atr .)
    WHILE           reduce using rule 38 (instr -> atr .)


state 22

    (39) instr -> write .

    }               reduce using rule 39 (instr -> write .)
    ID              reduce using rule 39 (instr -> write .)
    WRITE           reduce using rule 39 (instr -> write .)
    READ            reduce using rule 39 (instr -> write .)
    IF              reduce using rule 39 (instr -> write .)
    WHILE           reduce using rule 39 (instr -> write .)


state 23

    (40) instr -> read .

    }               reduce using rule 40 (instr -> read .)
    ID              reduce using rule 40 (instr -> read .)
    WRITE           reduce using rule 40 (instr -> read .)
    READ            reduce using rule 40 (instr -> read .)
    IF              reduce using rule 40 (instr -> read .)
    WHILE           reduce using rule 40 (instr -> read .)


state 24

    (41) instr -> cond .

    }               reduce using rule 41 (instr -> cond .)
    ID              reduce using rule 41 (instr -> cond .)
    WRITE           reduce using rule 41 (instr -> cond .)
    READ            reduce using rule 41 (instr -> cond .)
    IF              reduce using rule 41 (instr -> cond .)
    WHILE           reduce using rule 41 (instr -> cond .)


state 25

    (42) instr -> loop .

    }               reduce using rule 42 (instr -> loop .)
    ID              reduce using rule 42 (instr -> loop .)
    WRITE           reduce using rule 42 (instr -> loop .)
    READ            reduce using rule 42 (instr -> loop .)
    IF              reduce using rule 42 (instr -> loop .)
    WHILE           reduce using rule 42 (instr -> loop .)


state 26

    (43) instr -> fcall .

    }               reduce using rule 43 (instr -> fcall .)
    ID              reduce using rule 43 (instr -> fcall .)
    WRITE           reduce using rule 43 (instr -> fcall .)
    READ            reduce using rule 43 (instr -> fcall .)
    IF              reduce using rule 43 (instr -> fcall .)
    WHILE           reduce using rule 43 (instr -> fcall .)


state 27

    (45) atr -> ID . = expr ;
    (46) atr -> ID . = read
    (47) atr -> ID . [ expr ] = read
    (62) fcall -> ID . ( ) ;

    =               shift and go to state 41
    [               shift and go to state 42
    (               shift and go to state 43


state 28

    (48) write -> WRITE . ( STR ) ;
    (49) write -> WRITE . ( ID ) ;

    (               shift and go to state 44


state 29

    (50) read -> READ . ( ID ) ;

    (               shift and go to state 45


state 30

    (51) cond -> ifelseexpr . instrscondifelse elsecond
    (53) instrscondifelse -> . { instrs }

    {               shift and go to state 47

    instrscondifelse               shift and go to state 46

state 31

    (55) cond -> ifexpr . instrscondif
    (57) instrscondif -> . { instrs }

    {               shift and go to state 49

    instrscondif                   shift and go to state 48

state 32

    (58) loop -> whiledo . whilexprs doinstrs
    (60) whilexprs -> . ( expr )

    (               shift and go to state 51

    whilexprs                      shift and go to state 50

state 33

    (52) ifelseexpr -> IF . ( expr )
    (56) ifexpr -> IF . ( expr )

    (               shift and go to state 52


state 34

    (59) whiledo -> WHILE .

    (               reduce using rule 59 (whiledo -> WHILE .)


state 35

    (10) singdecl -> ID ; .

    MAIN            reduce using rule 10 (singdecl -> ID ; .)
    INT             reduce using rule 10 (singdecl -> ID ; .)
    DEF             reduce using rule 10 (singdecl -> ID ; .)


state 36

    (11) singdecl -> ID = . expr ;
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 54
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 37

    (12) singdecl -> ID [ . NUM ] ;

    NUM             shift and go to state 62


state 38

    (35) func -> DEF ID ( . ) { instrs }

    )               shift and go to state 63


state 39

    (4) main -> MAIN { instrs } .

    $end            reduce using rule 4 (main -> MAIN { instrs } .)


state 40

    (36) instrs -> instrs instr .

    }               reduce using rule 36 (instrs -> instrs instr .)
    ID              reduce using rule 36 (instrs -> instrs instr .)
    WRITE           reduce using rule 36 (instrs -> instrs instr .)
    READ            reduce using rule 36 (instrs -> instrs instr .)
    IF              reduce using rule 36 (instrs -> instrs instr .)
    WHILE           reduce using rule 36 (instrs -> instrs instr .)


state 41

    (45) atr -> ID = . expr ;
    (46) atr -> ID = . read
    (15) expr -> . lexpr
    (50) read -> . READ ( ID ) ;
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    READ            shift and go to state 29
    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 64
    read                           shift and go to state 65
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 42

    (47) atr -> ID [ . expr ] = read
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 66
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 43

    (62) fcall -> ID ( . ) ;

    )               shift and go to state 67


state 44

    (48) write -> WRITE ( . STR ) ;
    (49) write -> WRITE ( . ID ) ;

    STR             shift and go to state 68
    ID              shift and go to state 69


state 45

    (50) read -> READ ( . ID ) ;

    ID              shift and go to state 70


state 46

    (51) cond -> ifelseexpr instrscondifelse . elsecond
    (54) elsecond -> . ELSE { instrs }

    ELSE            shift and go to state 72

    elsecond                       shift and go to state 71

state 47

    (53) instrscondifelse -> { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 73
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 48

    (55) cond -> ifexpr instrscondif .

    }               reduce using rule 55 (cond -> ifexpr instrscondif .)
    ID              reduce using rule 55 (cond -> ifexpr instrscondif .)
    WRITE           reduce using rule 55 (cond -> ifexpr instrscondif .)
    READ            reduce using rule 55 (cond -> ifexpr instrscondif .)
    IF              reduce using rule 55 (cond -> ifexpr instrscondif .)
    WHILE           reduce using rule 55 (cond -> ifexpr instrscondif .)


state 49

    (57) instrscondif -> { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 74
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 50

    (58) loop -> whiledo whilexprs . doinstrs
    (61) doinstrs -> . DO { instrs }

    DO              shift and go to state 76

    doinstrs                       shift and go to state 75

state 51

    (60) whilexprs -> ( . expr )
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 77
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 52

    (52) ifelseexpr -> IF ( . expr )
    (56) ifexpr -> IF ( . expr )
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 78
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 53

    (32) factor -> ID .
    (33) factor -> ID . [ expr ]

    *               reduce using rule 32 (factor -> ID .)
    /               reduce using rule 32 (factor -> ID .)
    %               reduce using rule 32 (factor -> ID .)
    +               reduce using rule 32 (factor -> ID .)
    -               reduce using rule 32 (factor -> ID .)
    EQ              reduce using rule 32 (factor -> ID .)
    >               reduce using rule 32 (factor -> ID .)
    <               reduce using rule 32 (factor -> ID .)
    GEQ             reduce using rule 32 (factor -> ID .)
    LEQ             reduce using rule 32 (factor -> ID .)
    ;               reduce using rule 32 (factor -> ID .)
    ]               reduce using rule 32 (factor -> ID .)
    )               reduce using rule 32 (factor -> ID .)
    [               shift and go to state 79


state 54

    (11) singdecl -> ID = expr . ;

    ;               shift and go to state 80


state 55

    (15) expr -> lexpr .
    (16) lexpr -> lexpr . EQ arithm
    (17) lexpr -> lexpr . > arithm
    (18) lexpr -> lexpr . < arithm
    (19) lexpr -> lexpr . GEQ arithm
    (20) lexpr -> lexpr . LEQ arithm

    ;               reduce using rule 15 (expr -> lexpr .)
    ]               reduce using rule 15 (expr -> lexpr .)
    )               reduce using rule 15 (expr -> lexpr .)
    EQ              shift and go to state 81
    >               shift and go to state 82
    <               shift and go to state 83
    GEQ             shift and go to state 84
    LEQ             shift and go to state 85


state 56

    (21) lexpr -> arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 21 (lexpr -> arithm .)
    >               reduce using rule 21 (lexpr -> arithm .)
    <               reduce using rule 21 (lexpr -> arithm .)
    GEQ             reduce using rule 21 (lexpr -> arithm .)
    LEQ             reduce using rule 21 (lexpr -> arithm .)
    ;               reduce using rule 21 (lexpr -> arithm .)
    ]               reduce using rule 21 (lexpr -> arithm .)
    )               reduce using rule 21 (lexpr -> arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 57

    (24) arithm -> term .
    (25) term -> term . * par
    (26) term -> term . / par
    (27) term -> term . % par

    +               reduce using rule 24 (arithm -> term .)
    -               reduce using rule 24 (arithm -> term .)
    EQ              reduce using rule 24 (arithm -> term .)
    >               reduce using rule 24 (arithm -> term .)
    <               reduce using rule 24 (arithm -> term .)
    GEQ             reduce using rule 24 (arithm -> term .)
    LEQ             reduce using rule 24 (arithm -> term .)
    ;               reduce using rule 24 (arithm -> term .)
    ]               reduce using rule 24 (arithm -> term .)
    )               reduce using rule 24 (arithm -> term .)
    *               shift and go to state 88
    /               shift and go to state 89
    %               shift and go to state 90


state 58

    (28) term -> par .

    *               reduce using rule 28 (term -> par .)
    /               reduce using rule 28 (term -> par .)
    %               reduce using rule 28 (term -> par .)
    +               reduce using rule 28 (term -> par .)
    -               reduce using rule 28 (term -> par .)
    EQ              reduce using rule 28 (term -> par .)
    >               reduce using rule 28 (term -> par .)
    <               reduce using rule 28 (term -> par .)
    GEQ             reduce using rule 28 (term -> par .)
    LEQ             reduce using rule 28 (term -> par .)
    ;               reduce using rule 28 (term -> par .)
    ]               reduce using rule 28 (term -> par .)
    )               reduce using rule 28 (term -> par .)


state 59

    (29) par -> ( . expr )
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 91
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 60

    (30) par -> factor .

    *               reduce using rule 30 (par -> factor .)
    /               reduce using rule 30 (par -> factor .)
    %               reduce using rule 30 (par -> factor .)
    +               reduce using rule 30 (par -> factor .)
    -               reduce using rule 30 (par -> factor .)
    EQ              reduce using rule 30 (par -> factor .)
    >               reduce using rule 30 (par -> factor .)
    <               reduce using rule 30 (par -> factor .)
    GEQ             reduce using rule 30 (par -> factor .)
    LEQ             reduce using rule 30 (par -> factor .)
    ;               reduce using rule 30 (par -> factor .)
    ]               reduce using rule 30 (par -> factor .)
    )               reduce using rule 30 (par -> factor .)


state 61

    (31) factor -> NUM .

    *               reduce using rule 31 (factor -> NUM .)
    /               reduce using rule 31 (factor -> NUM .)
    %               reduce using rule 31 (factor -> NUM .)
    +               reduce using rule 31 (factor -> NUM .)
    -               reduce using rule 31 (factor -> NUM .)
    EQ              reduce using rule 31 (factor -> NUM .)
    >               reduce using rule 31 (factor -> NUM .)
    <               reduce using rule 31 (factor -> NUM .)
    GEQ             reduce using rule 31 (factor -> NUM .)
    LEQ             reduce using rule 31 (factor -> NUM .)
    ;               reduce using rule 31 (factor -> NUM .)
    ]               reduce using rule 31 (factor -> NUM .)
    )               reduce using rule 31 (factor -> NUM .)


state 62

    (12) singdecl -> ID [ NUM . ] ;

    ]               shift and go to state 92


state 63

    (35) func -> DEF ID ( ) . { instrs }

    {               shift and go to state 93


state 64

    (45) atr -> ID = expr . ;

    ;               shift and go to state 94


state 65

    (46) atr -> ID = read .

    }               reduce using rule 46 (atr -> ID = read .)
    ID              reduce using rule 46 (atr -> ID = read .)
    WRITE           reduce using rule 46 (atr -> ID = read .)
    READ            reduce using rule 46 (atr -> ID = read .)
    IF              reduce using rule 46 (atr -> ID = read .)
    WHILE           reduce using rule 46 (atr -> ID = read .)


state 66

    (47) atr -> ID [ expr . ] = read

    ]               shift and go to state 95


state 67

    (62) fcall -> ID ( ) . ;

    ;               shift and go to state 96


state 68

    (48) write -> WRITE ( STR . ) ;

    )               shift and go to state 97


state 69

    (49) write -> WRITE ( ID . ) ;

    )               shift and go to state 98


state 70

    (50) read -> READ ( ID . ) ;

    )               shift and go to state 99


state 71

    (51) cond -> ifelseexpr instrscondifelse elsecond .

    }               reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)
    ID              reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)
    WRITE           reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)
    READ            reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)
    IF              reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)
    WHILE           reduce using rule 51 (cond -> ifelseexpr instrscondifelse elsecond .)


state 72

    (54) elsecond -> ELSE . { instrs }

    {               shift and go to state 100


state 73

    (53) instrscondifelse -> { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 101
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 74

    (57) instrscondif -> { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 102
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 75

    (58) loop -> whiledo whilexprs doinstrs .

    }               reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)
    ID              reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)
    WRITE           reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)
    READ            reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)
    IF              reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)
    WHILE           reduce using rule 58 (loop -> whiledo whilexprs doinstrs .)


state 76

    (61) doinstrs -> DO . { instrs }

    {               shift and go to state 103


state 77

    (60) whilexprs -> ( expr . )

    )               shift and go to state 104


state 78

    (52) ifelseexpr -> IF ( expr . )
    (56) ifexpr -> IF ( expr . )

    )               shift and go to state 105


state 79

    (33) factor -> ID [ . expr ]
    (15) expr -> . lexpr
    (16) lexpr -> . lexpr EQ arithm
    (17) lexpr -> . lexpr > arithm
    (18) lexpr -> . lexpr < arithm
    (19) lexpr -> . lexpr GEQ arithm
    (20) lexpr -> . lexpr LEQ arithm
    (21) lexpr -> . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    expr                           shift and go to state 106
    lexpr                          shift and go to state 55
    arithm                         shift and go to state 56
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 80

    (11) singdecl -> ID = expr ; .

    MAIN            reduce using rule 11 (singdecl -> ID = expr ; .)
    INT             reduce using rule 11 (singdecl -> ID = expr ; .)
    DEF             reduce using rule 11 (singdecl -> ID = expr ; .)


state 81

    (16) lexpr -> lexpr EQ . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    arithm                         shift and go to state 107
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 82

    (17) lexpr -> lexpr > . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    arithm                         shift and go to state 108
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 83

    (18) lexpr -> lexpr < . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    arithm                         shift and go to state 109
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 84

    (19) lexpr -> lexpr GEQ . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    arithm                         shift and go to state 110
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 85

    (20) lexpr -> lexpr LEQ . arithm
    (22) arithm -> . arithm + term
    (23) arithm -> . arithm - term
    (24) arithm -> . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    arithm                         shift and go to state 111
    term                           shift and go to state 57
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 86

    (22) arithm -> arithm + . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    term                           shift and go to state 112
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 87

    (23) arithm -> arithm - . term
    (25) term -> . term * par
    (26) term -> . term / par
    (27) term -> . term % par
    (28) term -> . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    term                           shift and go to state 113
    par                            shift and go to state 58
    factor                         shift and go to state 60

state 88

    (25) term -> term * . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    par                            shift and go to state 114
    factor                         shift and go to state 60

state 89

    (26) term -> term / . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    par                            shift and go to state 115
    factor                         shift and go to state 60

state 90

    (27) term -> term % . par
    (29) par -> . ( expr )
    (30) par -> . factor
    (31) factor -> . NUM
    (32) factor -> . ID
    (33) factor -> . ID [ expr ]

    (               shift and go to state 59
    NUM             shift and go to state 61
    ID              shift and go to state 53

    par                            shift and go to state 116
    factor                         shift and go to state 60

state 91

    (29) par -> ( expr . )

    )               shift and go to state 117


state 92

    (12) singdecl -> ID [ NUM ] . ;

    ;               shift and go to state 118


state 93

    (35) func -> DEF ID ( ) { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 119
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 94

    (45) atr -> ID = expr ; .

    }               reduce using rule 45 (atr -> ID = expr ; .)
    ID              reduce using rule 45 (atr -> ID = expr ; .)
    WRITE           reduce using rule 45 (atr -> ID = expr ; .)
    READ            reduce using rule 45 (atr -> ID = expr ; .)
    IF              reduce using rule 45 (atr -> ID = expr ; .)
    WHILE           reduce using rule 45 (atr -> ID = expr ; .)


state 95

    (47) atr -> ID [ expr ] . = read

    =               shift and go to state 120


state 96

    (62) fcall -> ID ( ) ; .

    }               reduce using rule 62 (fcall -> ID ( ) ; .)
    ID              reduce using rule 62 (fcall -> ID ( ) ; .)
    WRITE           reduce using rule 62 (fcall -> ID ( ) ; .)
    READ            reduce using rule 62 (fcall -> ID ( ) ; .)
    IF              reduce using rule 62 (fcall -> ID ( ) ; .)
    WHILE           reduce using rule 62 (fcall -> ID ( ) ; .)


state 97

    (48) write -> WRITE ( STR ) . ;

    ;               shift and go to state 121


state 98

    (49) write -> WRITE ( ID ) . ;

    ;               shift and go to state 122


state 99

    (50) read -> READ ( ID ) . ;

    ;               shift and go to state 123


state 100

    (54) elsecond -> ELSE { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 124
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 101

    (53) instrscondifelse -> { instrs } .

    ELSE            reduce using rule 53 (instrscondifelse -> { instrs } .)


state 102

    (57) instrscondif -> { instrs } .

    }               reduce using rule 57 (instrscondif -> { instrs } .)
    ID              reduce using rule 57 (instrscondif -> { instrs } .)
    WRITE           reduce using rule 57 (instrscondif -> { instrs } .)
    READ            reduce using rule 57 (instrscondif -> { instrs } .)
    IF              reduce using rule 57 (instrscondif -> { instrs } .)
    WHILE           reduce using rule 57 (instrscondif -> { instrs } .)


state 103

    (61) doinstrs -> DO { . instrs }
    (36) instrs -> . instrs instr
    (37) instrs -> . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               reduce using rule 44 (instr -> .)
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instrs                         shift and go to state 125
    instr                          shift and go to state 20
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 104

    (60) whilexprs -> ( expr ) .

    DO              reduce using rule 60 (whilexprs -> ( expr ) .)


state 105

    (52) ifelseexpr -> IF ( expr ) .
    (56) ifexpr -> IF ( expr ) .

  ! reduce/reduce conflict for { resolved using rule 52 (ifelseexpr -> IF ( expr ) .)
    {               reduce using rule 52 (ifelseexpr -> IF ( expr ) .)

  ! {               [ reduce using rule 56 (ifexpr -> IF ( expr ) .) ]


state 106

    (33) factor -> ID [ expr . ]

    ]               shift and go to state 126


state 107

    (16) lexpr -> lexpr EQ arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    >               reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    <               reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    GEQ             reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    LEQ             reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    ;               reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    ]               reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    )               reduce using rule 16 (lexpr -> lexpr EQ arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 108

    (17) lexpr -> lexpr > arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 17 (lexpr -> lexpr > arithm .)
    >               reduce using rule 17 (lexpr -> lexpr > arithm .)
    <               reduce using rule 17 (lexpr -> lexpr > arithm .)
    GEQ             reduce using rule 17 (lexpr -> lexpr > arithm .)
    LEQ             reduce using rule 17 (lexpr -> lexpr > arithm .)
    ;               reduce using rule 17 (lexpr -> lexpr > arithm .)
    ]               reduce using rule 17 (lexpr -> lexpr > arithm .)
    )               reduce using rule 17 (lexpr -> lexpr > arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 109

    (18) lexpr -> lexpr < arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 18 (lexpr -> lexpr < arithm .)
    >               reduce using rule 18 (lexpr -> lexpr < arithm .)
    <               reduce using rule 18 (lexpr -> lexpr < arithm .)
    GEQ             reduce using rule 18 (lexpr -> lexpr < arithm .)
    LEQ             reduce using rule 18 (lexpr -> lexpr < arithm .)
    ;               reduce using rule 18 (lexpr -> lexpr < arithm .)
    ]               reduce using rule 18 (lexpr -> lexpr < arithm .)
    )               reduce using rule 18 (lexpr -> lexpr < arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 110

    (19) lexpr -> lexpr GEQ arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    >               reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    <               reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    GEQ             reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    LEQ             reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    ;               reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    ]               reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    )               reduce using rule 19 (lexpr -> lexpr GEQ arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 111

    (20) lexpr -> lexpr LEQ arithm .
    (22) arithm -> arithm . + term
    (23) arithm -> arithm . - term

    EQ              reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    >               reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    <               reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    GEQ             reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    LEQ             reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    ;               reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    ]               reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    )               reduce using rule 20 (lexpr -> lexpr LEQ arithm .)
    +               shift and go to state 86
    -               shift and go to state 87


state 112

    (22) arithm -> arithm + term .
    (25) term -> term . * par
    (26) term -> term . / par
    (27) term -> term . % par

    +               reduce using rule 22 (arithm -> arithm + term .)
    -               reduce using rule 22 (arithm -> arithm + term .)
    EQ              reduce using rule 22 (arithm -> arithm + term .)
    >               reduce using rule 22 (arithm -> arithm + term .)
    <               reduce using rule 22 (arithm -> arithm + term .)
    GEQ             reduce using rule 22 (arithm -> arithm + term .)
    LEQ             reduce using rule 22 (arithm -> arithm + term .)
    ;               reduce using rule 22 (arithm -> arithm + term .)
    ]               reduce using rule 22 (arithm -> arithm + term .)
    )               reduce using rule 22 (arithm -> arithm + term .)
    *               shift and go to state 88
    /               shift and go to state 89
    %               shift and go to state 90


state 113

    (23) arithm -> arithm - term .
    (25) term -> term . * par
    (26) term -> term . / par
    (27) term -> term . % par

    +               reduce using rule 23 (arithm -> arithm - term .)
    -               reduce using rule 23 (arithm -> arithm - term .)
    EQ              reduce using rule 23 (arithm -> arithm - term .)
    >               reduce using rule 23 (arithm -> arithm - term .)
    <               reduce using rule 23 (arithm -> arithm - term .)
    GEQ             reduce using rule 23 (arithm -> arithm - term .)
    LEQ             reduce using rule 23 (arithm -> arithm - term .)
    ;               reduce using rule 23 (arithm -> arithm - term .)
    ]               reduce using rule 23 (arithm -> arithm - term .)
    )               reduce using rule 23 (arithm -> arithm - term .)
    *               shift and go to state 88
    /               shift and go to state 89
    %               shift and go to state 90


state 114

    (25) term -> term * par .

    *               reduce using rule 25 (term -> term * par .)
    /               reduce using rule 25 (term -> term * par .)
    %               reduce using rule 25 (term -> term * par .)
    +               reduce using rule 25 (term -> term * par .)
    -               reduce using rule 25 (term -> term * par .)
    EQ              reduce using rule 25 (term -> term * par .)
    >               reduce using rule 25 (term -> term * par .)
    <               reduce using rule 25 (term -> term * par .)
    GEQ             reduce using rule 25 (term -> term * par .)
    LEQ             reduce using rule 25 (term -> term * par .)
    ;               reduce using rule 25 (term -> term * par .)
    ]               reduce using rule 25 (term -> term * par .)
    )               reduce using rule 25 (term -> term * par .)


state 115

    (26) term -> term / par .

    *               reduce using rule 26 (term -> term / par .)
    /               reduce using rule 26 (term -> term / par .)
    %               reduce using rule 26 (term -> term / par .)
    +               reduce using rule 26 (term -> term / par .)
    -               reduce using rule 26 (term -> term / par .)
    EQ              reduce using rule 26 (term -> term / par .)
    >               reduce using rule 26 (term -> term / par .)
    <               reduce using rule 26 (term -> term / par .)
    GEQ             reduce using rule 26 (term -> term / par .)
    LEQ             reduce using rule 26 (term -> term / par .)
    ;               reduce using rule 26 (term -> term / par .)
    ]               reduce using rule 26 (term -> term / par .)
    )               reduce using rule 26 (term -> term / par .)


state 116

    (27) term -> term % par .

    *               reduce using rule 27 (term -> term % par .)
    /               reduce using rule 27 (term -> term % par .)
    %               reduce using rule 27 (term -> term % par .)
    +               reduce using rule 27 (term -> term % par .)
    -               reduce using rule 27 (term -> term % par .)
    EQ              reduce using rule 27 (term -> term % par .)
    >               reduce using rule 27 (term -> term % par .)
    <               reduce using rule 27 (term -> term % par .)
    GEQ             reduce using rule 27 (term -> term % par .)
    LEQ             reduce using rule 27 (term -> term % par .)
    ;               reduce using rule 27 (term -> term % par .)
    ]               reduce using rule 27 (term -> term % par .)
    )               reduce using rule 27 (term -> term % par .)


state 117

    (29) par -> ( expr ) .

    *               reduce using rule 29 (par -> ( expr ) .)
    /               reduce using rule 29 (par -> ( expr ) .)
    %               reduce using rule 29 (par -> ( expr ) .)
    +               reduce using rule 29 (par -> ( expr ) .)
    -               reduce using rule 29 (par -> ( expr ) .)
    EQ              reduce using rule 29 (par -> ( expr ) .)
    >               reduce using rule 29 (par -> ( expr ) .)
    <               reduce using rule 29 (par -> ( expr ) .)
    GEQ             reduce using rule 29 (par -> ( expr ) .)
    LEQ             reduce using rule 29 (par -> ( expr ) .)
    ;               reduce using rule 29 (par -> ( expr ) .)
    ]               reduce using rule 29 (par -> ( expr ) .)
    )               reduce using rule 29 (par -> ( expr ) .)


state 118

    (12) singdecl -> ID [ NUM ] ; .

    MAIN            reduce using rule 12 (singdecl -> ID [ NUM ] ; .)
    INT             reduce using rule 12 (singdecl -> ID [ NUM ] ; .)
    DEF             reduce using rule 12 (singdecl -> ID [ NUM ] ; .)


state 119

    (35) func -> DEF ID ( ) { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 127
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 120

    (47) atr -> ID [ expr ] = . read
    (50) read -> . READ ( ID ) ;

    READ            shift and go to state 29

    read                           shift and go to state 128

state 121

    (48) write -> WRITE ( STR ) ; .

    }               reduce using rule 48 (write -> WRITE ( STR ) ; .)
    ID              reduce using rule 48 (write -> WRITE ( STR ) ; .)
    WRITE           reduce using rule 48 (write -> WRITE ( STR ) ; .)
    READ            reduce using rule 48 (write -> WRITE ( STR ) ; .)
    IF              reduce using rule 48 (write -> WRITE ( STR ) ; .)
    WHILE           reduce using rule 48 (write -> WRITE ( STR ) ; .)


state 122

    (49) write -> WRITE ( ID ) ; .

    }               reduce using rule 49 (write -> WRITE ( ID ) ; .)
    ID              reduce using rule 49 (write -> WRITE ( ID ) ; .)
    WRITE           reduce using rule 49 (write -> WRITE ( ID ) ; .)
    READ            reduce using rule 49 (write -> WRITE ( ID ) ; .)
    IF              reduce using rule 49 (write -> WRITE ( ID ) ; .)
    WHILE           reduce using rule 49 (write -> WRITE ( ID ) ; .)


state 123

    (50) read -> READ ( ID ) ; .

    }               reduce using rule 50 (read -> READ ( ID ) ; .)
    ID              reduce using rule 50 (read -> READ ( ID ) ; .)
    WRITE           reduce using rule 50 (read -> READ ( ID ) ; .)
    READ            reduce using rule 50 (read -> READ ( ID ) ; .)
    IF              reduce using rule 50 (read -> READ ( ID ) ; .)
    WHILE           reduce using rule 50 (read -> READ ( ID ) ; .)


state 124

    (54) elsecond -> ELSE { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 129
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 125

    (61) doinstrs -> DO { instrs . }
    (36) instrs -> instrs . instr
    (38) instr -> . atr
    (39) instr -> . write
    (40) instr -> . read
    (41) instr -> . cond
    (42) instr -> . loop
    (43) instr -> . fcall
    (44) instr -> .
    (45) atr -> . ID = expr ;
    (46) atr -> . ID = read
    (47) atr -> . ID [ expr ] = read
    (48) write -> . WRITE ( STR ) ;
    (49) write -> . WRITE ( ID ) ;
    (50) read -> . READ ( ID ) ;
    (51) cond -> . ifelseexpr instrscondifelse elsecond
    (55) cond -> . ifexpr instrscondif
    (58) loop -> . whiledo whilexprs doinstrs
    (62) fcall -> . ID ( ) ;
    (52) ifelseexpr -> . IF ( expr )
    (56) ifexpr -> . IF ( expr )
    (59) whiledo -> . WHILE

  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    }               shift and go to state 130
    ID              shift and go to state 27
    WRITE           shift and go to state 28
    READ            shift and go to state 29
    IF              shift and go to state 33
    WHILE           shift and go to state 34

  ! }               [ reduce using rule 44 (instr -> .) ]
  ! ID              [ reduce using rule 44 (instr -> .) ]
  ! WRITE           [ reduce using rule 44 (instr -> .) ]
  ! READ            [ reduce using rule 44 (instr -> .) ]
  ! IF              [ reduce using rule 44 (instr -> .) ]
  ! WHILE           [ reduce using rule 44 (instr -> .) ]

    instr                          shift and go to state 40
    atr                            shift and go to state 21
    write                          shift and go to state 22
    read                           shift and go to state 23
    cond                           shift and go to state 24
    loop                           shift and go to state 25
    fcall                          shift and go to state 26
    ifelseexpr                     shift and go to state 30
    ifexpr                         shift and go to state 31
    whiledo                        shift and go to state 32

state 126

    (33) factor -> ID [ expr ] .

    *               reduce using rule 33 (factor -> ID [ expr ] .)
    /               reduce using rule 33 (factor -> ID [ expr ] .)
    %               reduce using rule 33 (factor -> ID [ expr ] .)
    +               reduce using rule 33 (factor -> ID [ expr ] .)
    -               reduce using rule 33 (factor -> ID [ expr ] .)
    EQ              reduce using rule 33 (factor -> ID [ expr ] .)
    >               reduce using rule 33 (factor -> ID [ expr ] .)
    <               reduce using rule 33 (factor -> ID [ expr ] .)
    GEQ             reduce using rule 33 (factor -> ID [ expr ] .)
    LEQ             reduce using rule 33 (factor -> ID [ expr ] .)
    ;               reduce using rule 33 (factor -> ID [ expr ] .)
    ]               reduce using rule 33 (factor -> ID [ expr ] .)
    )               reduce using rule 33 (factor -> ID [ expr ] .)


state 127

    (35) func -> DEF ID ( ) { instrs } .

    MAIN            reduce using rule 35 (func -> DEF ID ( ) { instrs } .)
    DEF             reduce using rule 35 (func -> DEF ID ( ) { instrs } .)


state 128

    (47) atr -> ID [ expr ] = read .

    }               reduce using rule 47 (atr -> ID [ expr ] = read .)
    ID              reduce using rule 47 (atr -> ID [ expr ] = read .)
    WRITE           reduce using rule 47 (atr -> ID [ expr ] = read .)
    READ            reduce using rule 47 (atr -> ID [ expr ] = read .)
    IF              reduce using rule 47 (atr -> ID [ expr ] = read .)
    WHILE           reduce using rule 47 (atr -> ID [ expr ] = read .)


state 129

    (54) elsecond -> ELSE { instrs } .

    }               reduce using rule 54 (elsecond -> ELSE { instrs } .)
    ID              reduce using rule 54 (elsecond -> ELSE { instrs } .)
    WRITE           reduce using rule 54 (elsecond -> ELSE { instrs } .)
    READ            reduce using rule 54 (elsecond -> ELSE { instrs } .)
    IF              reduce using rule 54 (elsecond -> ELSE { instrs } .)
    WHILE           reduce using rule 54 (elsecond -> ELSE { instrs } .)


state 130

    (61) doinstrs -> DO { instrs } .

    }               reduce using rule 61 (doinstrs -> DO { instrs } .)
    ID              reduce using rule 61 (doinstrs -> DO { instrs } .)
    WRITE           reduce using rule 61 (doinstrs -> DO { instrs } .)
    READ            reduce using rule 61 (doinstrs -> DO { instrs } .)
    IF              reduce using rule 61 (doinstrs -> DO { instrs } .)
    WHILE           reduce using rule 61 (doinstrs -> DO { instrs } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 12 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 12 resolved as shift
WARNING: shift/reduce conflict for READ in state 12 resolved as shift
WARNING: shift/reduce conflict for IF in state 12 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 12 resolved as shift
WARNING: shift/reduce conflict for } in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 19 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 19 resolved as shift
WARNING: shift/reduce conflict for READ in state 19 resolved as shift
WARNING: shift/reduce conflict for IF in state 19 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for } in state 73 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 73 resolved as shift
WARNING: shift/reduce conflict for READ in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for } in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 74 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 74 resolved as shift
WARNING: shift/reduce conflict for READ in state 74 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 93 resolved as shift
WARNING: shift/reduce conflict for READ in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 100 resolved as shift
WARNING: shift/reduce conflict for READ in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 103 resolved as shift
WARNING: shift/reduce conflict for READ in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 103 resolved as shift
WARNING: shift/reduce conflict for } in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 119 resolved as shift
WARNING: shift/reduce conflict for READ in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for } in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 124 resolved as shift
WARNING: shift/reduce conflict for READ in state 124 resolved as shift
WARNING: shift/reduce conflict for IF in state 124 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 124 resolved as shift
WARNING: shift/reduce conflict for } in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 125 resolved as shift
WARNING: shift/reduce conflict for READ in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: reduce/reduce conflict in state 105 resolved using rule (ifelseexpr -> IF ( expr ))
WARNING: rejected rule (ifexpr -> IF ( expr )) in state 105
WARNING: Rule (ifexpr -> IF ( expr )) is never reduced
